from sys import stdin


def min_coins_greedy(coins, value):
    i = 0
    count = 0
    while value > 0:
        while coins[i] > value:
            i += 1
        multiple = value // coins[i]
        value -= (coins[i] * multiple)
        count += multiple
    return count


def min_coins_dynamic(coins, value):
    if value in coins:
        return 1
    results = [Inf] * (value + 1)
    useful_coins = []
    for coin in coins:
        if coin <= value:
            results[coin] = 1
            useful_coins.append(coin)
    for current_value in range(1, value + 1):
        if results[current_value] != Inf:
            continue
        best = Inf
        for coin in useful_coins:
            if coin <= current_value:
                current = 1 + results[current_value - coin]
                if current < best:
                    best = current
        results[current_value] = best
    return results[value]


def can_use_greedy(coins):
    check_amounts = []
    for i in range(len(coins) - 1):
        if coins[i] % coins[i + 1] != 0:
            multiple = (coins[i] // coins[i + 1]) + 1
            difference = coins[i + 1] * (multiple) - coins[i]
            check_amounts.append((difference, multiple))
    for amount in check_amounts:
        i = 0
        COINS = 0
        while amount[0] > 0:
            while amount[0] < coins[i]:
                i += 1
            multiple = amount[0] // coins[i]
            amount = (amount[0] - (coins[i] * multiple), amount[1])
            COINS += multiple
        if COINS >= amount[1]:
            return False
    return True


Inf = 1000000000
coins = []
for c in stdin.readline().split():
    coins.append(int(c))
coins.sort()
coins.reverse()
method = stdin.readline().strip()
if method == "graadig" or (method == "velg" and can_use_greedy(coins)):
    for line in stdin:
        print(min_coins_greedy(coins, int(line)))
else:
    for line in stdin:
        print(min_coins_dynamic(coins, int(line)))
